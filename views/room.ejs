<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8" />
  <title>Room - <%= roomName %></title>
  <script src="/socket.io/socket.io.js"></script>
  <link rel="stylesheet" href="/style.css" />
</head>
<body>
  <%- include('partials/navbar') %>

  <!-- LOBBY -->
  <div id="lobby" style="margin-top:20px;">
    <h2>Lobby</h2>
    <div id="waiting-message">En attente du démarrage du quiz par l’admin...</div>
    <button id="start-quiz-btn" style="display: none;">Lancer le quiz</button>
  </div>

  <button id="close-room-btn" style="display:none;">Fermer la room</button>

  <!-- PASSWORD PROMPT -->
  <div id="password-prompt" role="dialog" aria-modal="true" aria-labelledby="password-label">
    <label id="password-label" for="password-input">Entrez le mot de passe de la room :</label>
    <input type="password" id="password-input" placeholder="Mot de passe..." autocomplete="off" aria-required="true" />
    <button id="join-room-btn" type="button">Rejoindre</button>
  </div>

  <!-- MAIN QUIZ CONTAINER -->
  <div id="container" style="display:none; flex-direction: row; gap: 20px;">
    <div id="main-quiz" style="display: none; border:1px solid #ccc; padding:10px; margin-top:20px; max-width: 600px;" aria-live="polite" role="region" aria-label="Quiz principal">
      <div id="quiz-info" style="margin-bottom: 10px; font-weight:bold;"></div>
      <div id="question-timer" style="margin-bottom:10px; font-weight: bold; color: red;"></div>
      <div id="question-container" style="margin-bottom:10px;"></div>
      <div id="answers-container" style="margin-bottom:10px;"></div>
      <button id="submit-answer" disabled>Valider ma réponse</button>
      <div id="quiz-notification" style="margin-top:10px; color: green;"></div>
      <div id="quiz-scores" style="margin-top:15px; font-weight: bold;"></div>
    </div>

    <div id="correction-panel" style="display:none; border:1px solid #f90; padding:10px; margin-top:20px; max-width: 600px;">
      <h3>Vue sur les réponses</h3>
      <div id="correction-question"></div>
      <div id="correction-user-answers" style="margin-top:10px; max-height: 300px; overflow-y: auto; border:1px solid #ddd; padding:5px;"></div>
      <button id="prev-correction-btn" disabled>Question précédente</button>
      <!-- <button id="validate-correction-btn">Valider cette question</button> -->
      <button id="next-correction-btn">Question suivante</button>
      <div id="correction-status" style="margin-top:10px; color: green;"></div>
    </div>

    <!-- Classement final -->
<div id="final-ranking" class="overlay" style="display:none; margin-top: 20px; border:1px solid #666; padding: 15px; max-width: 600px;">
  <h3>Classement final des joueurs</h3>
  <table id="ranking-table" style="width: 100%; border-collapse: collapse;">
    <thead>
      <tr>
        <th style="border-bottom: 1px solid #ccc; padding: 5px;">Rank</th>
        <th style="border-bottom: 1px solid #ccc; padding: 5px;">Joueur</th>
        <th style="border-bottom: 1px solid #ccc; padding: 5px;">Score</th>
      </tr>
    </thead>
    <tbody></tbody>
  </table>
</div>


    <div id="right-panel" style="flex-grow: 1;">
      <div id="user-list" style="display:none; margin-bottom: 20px;">Chargement des utilisateurs...</div>
      <div id="chat-box" style="display:none; max-height: 400px; overflow-y: auto; border:1px solid #ccc; padding:10px; margin-bottom: 10px;"></div>
      <div id="typing-indicator" style="height: 20px; margin-bottom: 10px;"></div>
      <form id="chat-form" style="display:none; gap: 5px; display: flex;">
        <input type="text" id="msg" placeholder="Écris un message..." autocomplete="off" style="flex-grow:1;"/>
        <button type="submit">Envoyer</button>
      </form>
    </div>
  </div>

  <script>
    const roomName = "<%= roomName %>";
    const userRole = "<%= user.role %>";
    const socket = io({ withCredentials: true });

    // DOM Elements
    const chatBox = document.getElementById("chat-box");
    const userListContainer = document.getElementById("user-list");
    const typingIndicator = document.getElementById("typing-indicator");
    const form = document.getElementById("chat-form");
    const input = document.getElementById("msg");
    const passwordPrompt = document.getElementById("password-prompt");
    const passwordInput = document.getElementById("password-input");
    const joinRoomBtn = document.getElementById("join-room-btn");
    const closeRoomBtn = document.getElementById("close-room-btn");
    const container = document.getElementById("container");
    const startQuizBtn = document.getElementById("start-quiz-btn");

    const mainQuiz = document.getElementById("main-quiz");
    const quizInfo = document.getElementById("quiz-info");
    const questionContainer = document.getElementById("question-container");
    const answersContainer = document.getElementById("answers-container");
    const submitAnswerBtn = document.getElementById("submit-answer");
    const quizNotification = document.getElementById("quiz-notification");
    const quizScores = document.getElementById("quiz-scores");

    const correctionPanel = document.getElementById("correction-panel");
    const correctionQuestion = document.getElementById("correction-question");
    const correctionUserAnswers = document.getElementById("correction-user-answers");
    const prevCorrectionBtn = document.getElementById("prev-correction-btn");
    const nextCorrectionBtn = document.getElementById("next-correction-btn");
    // const validateCorrectionBtn = document.getElementById("validate-correction-btn");
    const correctionStatus = document.getElementById("correction-status");

    // Variables
    let quizQuestions = [];
    let currentQuestionIndex = 0;
    let userAnswers = []; // pour stocker localement les réponses du user (index des réponses)
    let questionTimer = null;
    let canAnswer = true; // interdit de répondre plusieurs fois par question
    let questionInterval = null; // nouvelle variable

    // Fonction popup
    function showPopup(message) {
      const popup = document.createElement("div");
      popup.className = "popup";
      popup.textContent = message;
      document.body.appendChild(popup);
      setTimeout(() => popup.remove(), 3500);
    }

    // Join room
    function joinRoom(password) {
      socket.emit("joinRoom", { room: roomName, password });
    }

    joinRoomBtn.addEventListener("click", () => {
      const pwd = passwordInput.value.trim();
      if (!pwd) {
        showPopup("Veuillez entrer un mot de passe.");
        return;
      }
      joinRoom(pwd);
    });

    passwordInput.addEventListener("keydown", (e) => {
      if (e.key === "Enter") {
        joinRoomBtn.click();
      }
    });

    closeRoomBtn.addEventListener('click', () => {
      socket.emit('closeRoom', roomName);
    });

    startQuizBtn.addEventListener('click', () => {
      socket.emit('startQuiz');
    });

    socket.on("connect", () => {
      console.log("Connecté, en attente du mot de passe pour rejoindre la room.");
    });

    socket.on("chatHistory", (messages) => {
      passwordPrompt.style.display = "none";
      container.style.display = "flex";

      chatBox.style.display = "block";
      userListContainer.style.display = "block";
      form.style.display = "flex";

      chatBox.innerHTML = "";
      messages.forEach(msg => {
        const p = document.createElement("p");
        p.textContent = `${msg.user || 'Anonyme'}: ${msg.message}`;
        chatBox.appendChild(p);
      });
      chatBox.scrollTop = chatBox.scrollHeight;

      if (userRole === 'admin') {
        closeRoomBtn.style.display = 'inline-block';
        startQuizBtn.style.display = 'inline-block';
      }
    });

    socket.on("chatMessage", (data) => {
      const p = document.createElement("p");
      p.textContent = `${data.user || 'Anonyme'}: ${data.message}`;
      if (data.user === 'System') p.classList.add('system');
      chatBox.appendChild(p);
      chatBox.scrollTop = chatBox.scrollHeight;
    });

    socket.on("userList", (users) => {
      if (users.length === 0) {
        userListContainer.textContent = "Aucun utilisateur dans la room.";
      } else {
        userListContainer.innerHTML = `Utilisateurs dans la room (${users.length}) : <br>`;
        users.forEach(u => {
          userListContainer.innerHTML += 
            `<div style="display: flex; align-items: center; gap: 10px; margin: 5px 0;">
              <img src="/${u.avatar}" alt="${u.username}" style="width: 30px; height: 30px; border-radius: 50%;">
              <strong>${u.username}</strong>
            </div>`;
        });
      }
    });

    socket.on("notification", (message) => {
      showPopup(message);
      if (message.includes('a été fermée par l’admin.')) {
        setTimeout(() => {
          window.location.href = '/'; 
        }, 2000);
      }
    });

    socket.on("errorMessage", (msg) => {
      showPopup(msg);
    });

    let typingUsers = new Set();
    let typingClearTimeout;

    socket.on("typing", (user) => {
      typingUsers.add(user);
      updateTypingIndicator();

      clearTimeout(typingClearTimeout);
      typingClearTimeout = setTimeout(() => {
        typingUsers.clear();
        updateTypingIndicator();
      }, 1000);
    });

    function updateTypingIndicator() {
      if (typingUsers.size === 0) {
        typingIndicator.textContent = "";
      } else {
        const names = Array.from(typingUsers).join(", ");
        typingIndicator.textContent = `${names} ${typingUsers.size > 1 ? 'sont' : 'est'} en train d’écrire...`;
      }
    }

    form.addEventListener("submit", e => {
      e.preventDefault();
      const message = input.value.trim();
      if (message) {
        socket.emit("sendMessage", { room: roomName, message });
        input.value = "";
      }
    });

    input.addEventListener("input", () => {
      socket.emit("typing", roomName);
    });

    // === Quiz logic ===

socket.on("startQuiz", (questions) => {
  if (!questions?.length) {
    showPopup("Aucune question disponible.");
    return;
  }

  quizQuestions = questions;
  currentQuestionIndex = 0;
  userAnswers = new Array(quizQuestions.length).fill(null);
  document.getElementById("lobby").style.display = "none";
  mainQuiz.style.display = "block";
  correctionPanel.style.display = "none";
  quizNotification.textContent = "";
  quizScores.textContent = "";

  renderQuestion();
  launchTimer();
});

function renderQuestion() {
  const question = quizQuestions[currentQuestionIndex];
  if (!question) return;

  canAnswer = true;
  quizInfo.textContent = `Question ${currentQuestionIndex + 1} / ${quizQuestions.length}`;
  
  // Nettoyer le container
  questionContainer.innerHTML = "";

  // Ajouter le texte de la question
  const questionTextElem = document.createElement("p");
  questionTextElem.textContent = question.text;
  questionContainer.appendChild(questionTextElem);

  // Afficher média si existant
if (Array.isArray(question.media) && question.media.length > 0) {
  question.media.forEach(m => {
    let mediaElem;
    if (m.type === "image") {
      mediaElem = document.createElement("img");
      mediaElem.src = m.url;
      mediaElem.alt = "Image liée à la question";
      mediaElem.style.maxWidth = "100%";
      mediaElem.style.marginTop = "10px";
    } else if (m.type === "audio") {
      mediaElem = document.createElement("audio");
      mediaElem.src = m.url;
      mediaElem.controls = true;
      mediaElem.style.display = "block";
      mediaElem.style.marginTop = "10px";
    } else if (m.type === "video") {
      mediaElem = document.createElement("video");
      mediaElem.src = m.url;
      mediaElem.controls = true;
      mediaElem.style.display = "block";
      mediaElem.style.maxWidth = "100%";
      mediaElem.style.marginTop = "10px";
    }

    if (mediaElem) {
      questionContainer.appendChild(mediaElem);
    }
  });
}


  quizNotification.textContent = "";

  answersContainer.innerHTML = "";
  question.answers.forEach((answer, idx) => {
    const btn = document.createElement("button");
    btn.className = "answer-btn";
    btn.textContent = answer;
    btn.dataset.index = idx;
    btn.disabled = false;

    if (userAnswers[currentQuestionIndex] !== null) {
      btn.disabled = true;
      if (userAnswers[currentQuestionIndex] === idx) {
        btn.style.backgroundColor = "#ccc";
      }
    }

    btn.onclick = () => {
      if (!canAnswer) return;

      document.querySelectorAll(".answer-btn").forEach(b => {
        b.disabled = false;
        b.removeAttribute("data-selected");
        b.style.backgroundColor = "";
      });

      btn.dataset.selected = "true";
      btn.disabled = true;
      btn.style.backgroundColor = "#ddd";
      submitAnswerBtn.disabled = false;
    };

    answersContainer.appendChild(btn);
  });

  submitAnswerBtn.disabled = userAnswers[currentQuestionIndex] !== null;
}


submitAnswerBtn.addEventListener("click", () => {
  if (!canAnswer) return;

  const selected = document.querySelector(".answer-btn[data-selected='true']");
  if (!selected) return;

  const index = Number(selected.dataset.index);
  socket.emit("submitAnswer", { qIndex: currentQuestionIndex, answerIndex: index });

  userAnswers[currentQuestionIndex] = index;
  submitAnswerBtn.disabled = true;
  canAnswer = false;
  clearTimeout(questionTimer);
  quizNotification.textContent = "Réponse enregistrée.";

  if (currentQuestionIndex < quizQuestions.length - 1) {
    currentQuestionIndex++;
    renderQuestion();
    launchTimer();
  } else {
    socket.emit("startCorrection");
    mainQuiz.style.display = "none";
    quizNotification.textContent = "Quiz terminé. En attente de la correction...";
  }
});


function launchTimer() {
  clearTimeout(questionTimer);
  clearInterval(questionInterval); // nettoyer l'ancien interval

  const timerDisplay = document.getElementById("question-timer");
  let remaining = 15;
  timerDisplay.textContent = `Temps restant : ${remaining} s`;

  questionInterval = setInterval(() => {
    remaining--;
    if (remaining <= 0) {
      clearInterval(questionInterval);
    } else {
      timerDisplay.textContent = `Temps restant : ${remaining} s`;
    }
  }, 1000);

  questionTimer = setTimeout(() => {
    clearInterval(questionInterval);
    canAnswer = false;
    submitAnswerBtn.disabled = true;
    quizNotification.textContent = "Temps écoulé pour cette question.";
    timerDisplay.textContent = "Temps écoulé.";

    // Envoie de "non-réponse"
    if (userAnswers[currentQuestionIndex] === null) {
      userAnswers[currentQuestionIndex] = null;
      socket.emit("submitAnswer", { qIndex: currentQuestionIndex, answerIndex: null });
    }

    if (currentQuestionIndex < quizQuestions.length - 1) {
      currentQuestionIndex++;
      renderQuestion();
      launchTimer();
    } else {
      socket.emit("startCorrection");
      mainQuiz.style.display = "none";
      quizNotification.textContent = "Temps écoulé. En attente de la correction...";
    }
  }, 15000);
}



// === CORRECTION LOGIC ===

let allUserAnswers = {};
let currentCorrectionIndex = 0;

socket.on("startCorrection", (data) => {
  if (userRole !== "admin") return;

  mainQuiz.style.display = "none";
  correctionPanel.style.display = "block";
  correctionStatus.textContent = "";
  correctionQuestion.textContent = "";
  correctionUserAnswers.innerHTML = "";

  currentCorrectionIndex = 0;
  quizQuestions = data.questions;
  allUserAnswers = data.userAnswers;

  renderCorrectionQuestion();
});

function renderCorrectionQuestion() {
  const q = quizQuestions[currentCorrectionIndex];
  correctionQuestion.textContent = `Q${currentCorrectionIndex + 1}: ${q.text}`;
  correctionUserAnswers.innerHTML = "";

  for (const [username, answers] of Object.entries(allUserAnswers)) {
    const answerIndex = answers[currentCorrectionIndex];
    const userDiv = document.createElement("div");
    userDiv.style.marginBottom = "10px";

    const answerText = typeof answerIndex === "number" ? q.answers[answerIndex] : "Pas de réponse";

    userDiv.innerHTML = `<strong>${username} :</strong> ${answerText}`;
    correctionUserAnswers.appendChild(userDiv);
  }

  prevCorrectionBtn.disabled = currentCorrectionIndex === 0;
  nextCorrectionBtn.disabled = currentCorrectionIndex === quizQuestions.length - 1;
}

prevCorrectionBtn.addEventListener("click", () => {
  if (currentCorrectionIndex > 0) {
    currentCorrectionIndex--;
    renderCorrectionQuestion();
  }
});

nextCorrectionBtn.addEventListener("click", () => {
  if (currentCorrectionIndex < quizQuestions.length - 1) {
    currentCorrectionIndex++;
    renderCorrectionQuestion();
  }
});

// validateCorrectionBtn.addEventListener("click", () => {
//   correctionStatus.textContent = `Question ${currentCorrectionIndex + 1} validée.`;
  
//   // Envoi de la validation au serveur
//   socket.emit("validateCorrectionAnswer", { questionIndex: currentCorrectionIndex });
  
//   // Nettoyer le message après 2s
//   setTimeout(() => correctionStatus.textContent = "", 2000);
// });


socket.on("quizRanking", (ranking) => {
  // Masquer les autres panneaux
  mainQuiz.style.display = "none";
  correctionPanel.style.display = "none";

  const rankingDiv = document.getElementById("final-ranking");
  const tbody = document.querySelector("#ranking-table tbody");

  tbody.innerHTML = ""; // Vider le tableau

  ranking.forEach(({ rank, user, score }) => {
    const tr = document.createElement("tr");

    const tdRank = document.createElement("td");
    tdRank.textContent = rank;
    tdRank.style.padding = "5px";
    tdRank.style.textAlign = "center";

    const tdUser = document.createElement("td");
    tdUser.textContent = user;
    tdUser.style.padding = "5px";

    const tdScore = document.createElement("td");
    tdScore.textContent = score;
    tdScore.style.padding = "5px";
    tdScore.style.textAlign = "center";

    tr.appendChild(tdRank);
    tr.appendChild(tdUser);
    tr.appendChild(tdScore);

    tbody.appendChild(tr);
  });

  rankingDiv.style.display = "block";
  quizNotification.textContent = "Correction terminée. Voici le classement final.";
});


  </script>
</body>




</html>
